* Thoughts on C++ implementation.

* Types
** Symbol type
 'If a symbol occurs immediately after an opening parenthesis, it must denote a function and should be parsed as such. If it occurs within a list or as an argument to a function it should be parsed as an innocent symbol.'

 Symbol :> Variable
 Symbol :> Literal

 Sequent form:

X : cxx/variable
============
X : cxx/symbol


** Environment type
** Any: the catchall type with maximal entropy.  If the type of a variable can't be statically proven, it defaults to Any.
Fact: For any unknown type variable T, $\K T ~ \K Any$.
** List<T> type
*** Entropy: Given an object of type List<T>, the entropy depends on both T and the length of the list:
 L : (list T) â‡’ $\K L ~ (length L)\cdot \K T$,
where $\K T$ is the prefix complexity of an average object of type T.  If the actual value of T isn't known statically, then we fall back to a List<Any>, where Any is the catchall type.  It's tantamount to saying that the list can be heterogeneous.







